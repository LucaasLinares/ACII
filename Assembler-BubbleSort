; Definición de Argumentos esperados en memoria
; d10 = dirección base del vector original
; d11 = dirección base del vector ordenado
; d12 = cantidad de elementos del vector
; d13 = sentido de ordenamiento (0 = ascendente ; 1 = descendente)



; Carga de Argumentos
  cargar $r1, $d10        ; Asigna al registro $r1 la dirección del vector original
  cargar $r2, $d11        ; Asigna al registro $r2 la dirección del vector ordenado          
  cargar $r3, $d12        ; Asigna al registro $r3 la cantidad de elementos
  cargar $r4, $d13        ; Asigna al registro $r4 el sentido de ordenamiento

  mov $r5, #0             ; Inicializa el registro $r5 con el valor 0
COPIAR:
  cmp $r5, $r3            ; Compara los valores de los registros para 
  beq ORDENAR             ; Si la cantidad de elemenos ordenados es igual a la cantidad de elementos del vector se dirije a "ORDENAR"  
  add $r9, $r1, $r5       ; Modifica la variable auxiliar $r9 con la dirección del elemento original a comparar (desplazamiento)
  add $r10, $r2, $r5      ; Modifica la variable auxiliar $r10 la dirección destino en vector ordenado (desplazamiento)
  cargar $r7, $r9         ; Carga en $r7 el valor del elemento del vector original
  guardar $r7, $r10       ; Guarda en el vector ordenado
  add $r5, $r5, 1         ; Incrementa el valor de $r5
  jmp COPIAR              ; Salta a "COPIAR"

ORDENAR:
  cmp $r5, #0             ; Inicializa el registro $r5 con el valor 0

FOR_I:
  cmp $r5, $r3            ; Compara los valores del contador ($r5) con la cantidad de elementos del vector ($r3)
  beq FIN                 ; Si la cantidad de elemenos ordenados es igual a la cantidad de elementos del vector se dirije a "FIN"
  sub $r6, $r3, $r5       ; Calcula en $r6: j = n - i
  sub $r6, $r6, $#1       ; Ajusta $r6: j - j - 1 para iterar entre los elementos

FOR_J:
  cmp $r6, #0             ; Compara el valor de $r6 es menor que 0
  blt NEXT_I              ; Si j < 0, pasa al siguiente ciclo de i
  add $r9, $r2, $r6       ; Calcula en $r9 la direccion del elemento A[j]
  add $r10, $r6, #1       ;
  add $r10, $r2, $r10     ; Calcula en $r10 la direccion del elemento A[j+1]
  cargar $r7, $r9         ; Carga a A[j en $r7
  cargar $r8, $r10        ; Carga a A[j+1 en $r8

; Compara a las variables segun el sentido del ordenamiento
  cmp $r4, #0             ; Compara si el ordenamiento es ascendente
  beq ASC                 ; Si es 0, salta a comparación ascendente
  jmp DESC                ; Si es 1, salta a comparación descendente

ASC:
  cmp $r7, $r8            ; Compara A[j con A[j+1]
  blt CAMBIAR             ; Si A[j] es < A[j+1] , se dirije a "CAMBIAR"
  jmp CONTINUAR           ; Si no, se dirije a "CONTINUAR"

CAMBIAR:
  guardar $r8, $r9        ; Asigna A[j] con A[j+1]
  guardar $r7, $r10       ; Asigna A[j+1] con A[j]

CONTINUAR:
  sub $r6, $r6. #1        ; Decrementa J
  jmp FOR_J               ; Repite el ciclo

NEXT_I:
  add $r5, $r5, #1        ; Incrementa I
  jmp FOR_I               ; Repite el ciclo

FIN:
  jmp FIN                 ;

 
   
