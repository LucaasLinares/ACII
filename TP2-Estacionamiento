// Sistema de control de estacionamiento automatizado.
// Entradas:
//   Sensores de entrada/salida conectados a switches en la dirección 0xFF200040.
// Salidas:
//   - Cantidad de autos mostrada en LEDs en 0xFF200000.
//   - Mensajes UART a través de 0xFF201000.
// Descripción:
//   Este sistema monitorea el ingreso y egreso de vehículos a través de sensores,
//   detectando secuencias de activación que representan un movimiento válido. 
//   Al detectar una entrada o salida, ajusta un contador interno (R4) que indica
//   la cantidad de autos presentes en el estacionamiento (máx. 32). Los cambios
//   se reflejan en los LEDs y se informan por UART mediante una función printf 
//   personalizada que permite imprimir enteros con el formato "%d".
// Uso:
//   Al iniciar el programa, se ejecuta la función `inicio_estacionamiento`.
//	 Para simular la entrada y salida de vehículos se debe activar y desactivar 
//   manualmente los switches (posiciones 0 y 1) en la dirección 0xFF200040
//   Se recomienda configurar el UART y visualizar la salida por terminal.
//
//   Ejemplo de mensajes UART esperados:
//     Vehiculo ingresado. Total autos: 001. Espacios libres: 031
//     Vehiculo egresado. Total autos: 000. Espacios libres: 032
// ------------------------------------------------------------

.global _start
_start:
	BL inicio_estacionamiento

// ===============================
// PROGRAMA PRINTF AUXILIAR
// ===============================

// Subrutina para imprimir un carácter
print_char:
    PUSH {R5, R6, LR}
wait_uart:
    LDR R5, =0xff201000
    LDR R6, [R5]
    AND R6, #0xF0000000
    BEQ wait_uart

    LDR R5, =0xff201000
    STR R2, [R5]

    POP {R5, R6, LR}
    BX LR

// ----------------------------------------
// Subrutina para imprimir un número entero de 3 cifras
print_integer:
    PUSH {R7-R9, LR}

    MOV R7, R4         // Copia de R4
    MOV R8, #0         // Centenas
centenas_loop:
    CMP R7, #99
    BGT do_centena
    B end_centenas
do_centena:
    SUB R7, R7, #100
    ADD R8, R8, #1
    B centenas_loop
end_centenas:
    ADD R2, R8, #'0'
    BL print_char

    MOV R8, #0         // Decenas
decenas_loop:
    CMP R7, #9
    BGT do_decena
    B end_decenas
do_decena:
    SUB R7, R7, #10
    ADD R8, R8, #1
    B decenas_loop
end_decenas:
    ADD R2, R8, #'0'
    BL print_char

    // Unidades
    ADD R2, R7, #'0'
    BL print_char

    POP {R7-R9, LR}
    BX LR

// ----------------------------------------
// Función printf personalizada (solo %d)
printf:
    PUSH {R1-R12, LR}
    MOV R12, #0

next_char:
    LDRB R2, [R0], #1
    CMP R2, #0
    BEQ end_printf

    CMP R2, #'%'
    BNE print_direct

    LDRB R3, [R0], #1
    CMP R3, #'d'
    BNE print_percent_and_char

    LDR R4, [R1, R12, LSL #2]
    ADD R12, R12, #1
    BL print_integer
    B next_char

print_percent_and_char:
    MOV R2, #'%'
    BL print_char
    MOV R2, R3
    BL print_char
    B next_char

print_direct:
    BL print_char
    B next_char

end_printf:
    POP {R1-R12, LR}
    BX LR

// ===============================
// FIN PROGRAMA PRINTF
// ===============================

// ===============================
// INICIO DEL ESTACIONAMIENTO
// ===============================
inicio_estacionamiento:
	MOV R4, #0          	// Inicializar contador de autos en 0

bucle_principal:
	BL leer_estado
	CMP R1, #2          	// Estado "10"
	BEQ estado_1
	CMP R1, #1          	// Estado "01"
	BEQ estado_6
	B bucle_principal   	// Volver a esperar
 

// ==========================
// FUNCIONES DE ESTADO
// ==========================

estado_1:
	BL leer_estado
	CMP R1, #3          	// Estado "11"
	BEQ estado_2
	CMP R1, #2          	// Estado "10"
	BEQ estado_1
	B bucle_principal

estado_2:
	BL leer_estado
	CMP R1, #1          	// Estado "01"
	BEQ estado_3
	CMP R1, #3          	// Estado "11"
	BEQ estado_2
	B bucle_principal

estado_3:
	BL leer_estado
	CMP R1, #1          	// Estado "01"
	BEQ estado_3
	CMP R1, #0          	// Estado "00"
	BEQ suma_contador
	B bucle_principal

estado_6:
	BL leer_estado
	CMP R1, #3          	// Estado "11"
	BEQ estado_5
	CMP R1, #1          	// Estado "01"
	BEQ estado_6
	B bucle_principal

estado_5:
	BL leer_estado
	CMP R1, #2          	// Estado "10"
	BEQ estado_4
	CMP R1, #3          	// Estado "11"
	BEQ estado_5
	B bucle_principal

estado_4:
	BL leer_estado
	CMP R1, #2          	// Estado "10"
	BEQ estado_4
	CMP R1, #0          	// Estado "00"
	BEQ resta_contador
	B bucle_principal


// ==========================
// LECTURA DE ESTADO
// ==========================
leer_estado:
    PUSH {R5, R6, R2, R3, LR}

    LDR R6, =0xFF200040
    LDR R5, [R6]

    // Extraer sensor superior (bit 0)
    AND R2, R5, #0x1

    // Extraer sensor inferior (bit 1)
    AND R3, R5, #0x2
    LSR R3, R3, #1

    LSL R2, R2, #1
    ORR R1, R2, R3

    POP {R5, R6, R2, R3, LR}
    BX LR



// ==========================
// SUMA Y RESTA CONTADOR
// ==========================

suma_contador:
    CMP R4, #32
    BGE bucle_principal
    ADD R4, R4, #1

    // Mostrar en LEDs
    LDR R5, =0xff200000
    STR R4, [R5]

    // Calcular espacios libres: 32 - R4 → R6
    MOV R5, #32
    SUB R6, R5, R4

    // Preparar argumentos para printf
    LDR R0, =mensaje_ingreso
    LDR R1, =args_ingreso
    STR R4, [R1]         // Total autos
    STR R6, [R1, #4]     // Espacios libres

    BL printf
    B bucle_principal

resta_contador:
    CMP R4, #0
    BLE bucle_principal
    SUB R4, R4, #1

    // Mostrar en LEDs
    LDR R5, =0xff200000
    STR R4, [R5]

    // Calcular espacios libres: 32 - R4 → R6
    MOV R5, #32
    SUB R6, R5, R4

    // Preparar argumentos para printf
    LDR R0, =mensaje_egreso
    LDR R1, =args_egreso
    STR R4, [R1]         // Total autos
    STR R6, [R1, #4]     // Espacios libres

    BL printf
    B bucle_principal


// ==========================
// STRINGS PARA UART
// ==========================
.data
mensaje_ingreso:
	.asciz "Vehiculo ingresado. Total autos: %d. Espacios libres: %d\n"
mensaje_egreso:
	.asciz "Vehiculo egresado. Total autos: %d. Espacios libres: %d\n"
	
    .align 2
args_ingreso:
    .space 8         // 2 palabras = 8 bytes

args_egreso:
    .space 8
